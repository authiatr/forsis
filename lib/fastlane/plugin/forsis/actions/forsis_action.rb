require 'fastlane/action'
require_relative '../helper/forsis_helper'

module Fastlane
  module Actions
    class ForsisAction < Action
      def self.run(params)
        junit_report_path = params[:junit_report_file]
        sonarqube_report_path = params[:sonar_report_directory]
        search_in_target_folder = params[:search_in_target_folder]
        UI.message("Generating the Sonarqube generic test execution report!")
        Fastlane::Helper::ForsisHelper::Generator.generate(junit_report_path, sonarqube_report_path, search_in_target_folder)
      end

      def self.description
        "This plugin produces generic test execution reports supported by SonarQube from JUnit test reports generated by fastlane"
      end

      def self.authors
        ["Azadeh Bagheri"]
      end

      def self.available_options
        [
          FastlaneCore::ConfigItem.new(
            key: :junit_report_file,
            env_name: "forsis_JUNIT_REPORT",
            description: "The path of the junit test report file used to generate the generic test execution file for sonarqube ",
            optional: false,
            type: String,
            display_in_shell: false,
            verify_block: proc do |path|
              if path == ""
                UI.user_error!("'forsis' action missing the key 'junit_report_path' or its value.")
              else
                UI.user_error!("ERROR: junit report not found at path: #{path}") unless File.exist?(path)
              end
            end
          ),
          FastlaneCore::ConfigItem.new(
            key: :sonar_report_directory,
            env_name: "forsis_SONAR_GENERATED_REPORT",
            description: "The path of the sonarqube test execution report generated from the junit test report",
            optional: true,
            default_value: './fastlane',
            type: String,
            verify_block: proc do |path|
              FileUtils.mkdir_p(path) unless File.directory?(path)
            end
          ),
          FastlaneCore::ConfigItem.new(
            key: :search_in_target_folder,
            env_name: "forsis_SEARCH_IN_TARGET_FOLDER",
            description: "Weither the plugin should search in the class' target folder or in all project's folders",
            optional: true,
            default_value: false,
            is_string: false
          )
        ]
      end

      def self.is_supported?(platform)
        [:ios, :mac].include?(platform)
        true
      end
    end
  end
end
